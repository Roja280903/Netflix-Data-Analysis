# -*- coding: utf-8 -*-
"""Netflix Movie data Analysis.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C0wIJYZTElfrfBQySnfP8CjM6TsBxvkj
"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('mymoviedb.csv', lineterminator = '\n')
df.head()

#viewing dataset info
df.info()

"""
*   looks like that in this dataset their is no NaNs!
*   Overview, Orginal_Language and Poster-Url wouldn't be so useful during analysis!
*   Release_Dtae column needs to be casted into date time and to extract only the year value"""

#exploaring genre columns
df['Genre'].head()

#check for duplicated rows
df.duplicated().sum()

"""

*   our dataset has no duplicate rows either

"""

#exploring summary statistics
df.describe()

#data cleaning

"""Casting Release_Date Columns and extracting year values"""

df['Release_Date'] = pd.to_datetime(df['Release_Date'])
df['Year'] = df['Release_Date'].dt.year
df.head()

print(df['Year'].dtypes)

df.info()

df.head()

"""Dropping Overview, Original_Language, Poster_URL"""

#making list of column to be dropped
cols_to_drop = ['Overview', 'Original_Language', 'Poster_Url']

df.drop(cols_to_drop, axis = 1, inplace = True)
df.columns

df.head()

"""categorizing Vote_Average column
We would cut the Vote_Average values and make 4 categories: popular average
below_avg not_popular to describe it more using catigorize_col() function
provided above.
"""

def catigorize_col (df, col, labels):
  """
  catigorizes a certain column based on its quartiles
  Args:
  (df) df - dataframe we are proccesing
  (col) str - to be catigorized column's name
  (labels) list - list of labels from min to max
  Returns:
  (df) df - dataframe with the categorized col
  """
  # setting the edges to cut the column accordingly
  edges = [df[col].describe()['min'],
           df[col].describe()['25%'],
           df[col].describe()['50%'],
           df[col].describe()['75%'],
           df[col].describe()['max']]
  df[col] = pd.cut(df[col], edges, labels = labels, duplicates='drop')
  return df

# define labels for edges
labels = ['not_popular', 'below_avg', 'average', 'popular']
# categorize column based on labels and edges
catigorize_col(df, 'Vote_Average', labels)
# confirming changes
df['Vote_Average'].unique()

df.head()

# exploring column
df['Vote_Average'].value_counts()

# dropping NaNs
df.dropna(inplace = True)
# confirming
df.isna().sum()

df.head()

"""we'd split genres into a list and then
explode our dataframe to have only one
genre per row for each movie
"""

# split the strings into lists
df['Genre'] = df['Genre'].str.split(', ')
# explode the lists
df = df.explode('Genre').reset_index(drop=True)
df.head()

# casting column into category
df['Genre'] = df['Genre'].astype('category')
# confirming changes
df['Genre'].dtypes

df.info()

df.nunique()

"""Now that our dataset is clean and tidy, we are left with a total of 6 columns and 25551
rows to dig into during our analysis

# Data Visualization

here, we'd use Matplotlib and seaborn for making some informative visuals to gain
insights abut our data.
"""

# setting up seaborn configurations
sns.set_style('whitegrid')

"""# Q1: What is the most frequent genre in the dataset?




"""

# showing stats. on genre column
df['Genre'].describe()

# visualizing genre column
sns.catplot(y = 'Genre', data = df, kind = 'count',
order = df['Genre'].value_counts().index,
color = '#4287f5')
plt.title('genre column distribution')
plt.show()

"""we can notice from the above visual that Drama genre is the most frequent genre
in our dataset and has appeared more than 14% of the times among 19 other
genres.

# Q2: What genres has highest votes?
"""

# visualizing vote_average column
sns.catplot(y = 'Vote_Average', data = df, kind = 'count',
order = df['Vote_Average'].value_counts().index,
color = '#4287f5')
plt.title('votes destribution')
plt.show()

"""# Q3: What movie got the highest popularity? what's its genre?"""

# checking max popularity in dataset
df[df['Popularity'] == df['Popularity'].max()]

"""# Q4: What movie got the lowest popularity? what's its genre?"""

# checking max popularity in dataset
df[df['Popularity'] == df['Popularity'].min()]

"""# Q5: Which year has the most filmmed movies?"""

df['Release_Date'].hist()
plt.title('Release_Date column distribution')
plt.show()

"""# CONCLUSION

*   Q1: What is the most frequent genre in the dataset?

*   Drama genre is the most frequent genre in our dataset and has appeared more than 14% of the times among 19 other genres.


*   Q2: What genres has highest votes ?

*   we have 25.5% of our dataset with popular vote (6520 rows). Drama again gets the highest popularity among fans by being having more than 18.5% of movies popularities.



*   Q3: What movie got the highest popularity ? what's its genre ?

*   Spider-Man: No Way Home has the highest popularity rate in our dataset and it has genres of Action , Adventure and Sience Fiction .




*   Q4: What movie got the lowest popularity ? what's its genre ?

*  The united states, thread' has the highest lowest rate in our dataset and it has genres of music , drama , 'war', 'sci-fi' and history`.




*   Q5: Which year has the most filmmed movies?

*   year 2020 has the highest filmming rate in our dataset.
"""